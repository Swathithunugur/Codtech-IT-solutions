package com.codtech;
import java.util.Scanner;
import java.util.Random;
public class TicTacToe {
    private static final char EMPTY = ' ';
    private static final char X_MARK = 'X';
    private static final char O_MARK = 'O';
    private static char[][] board = new char[3][3];
    private static char currentPlayer;
    private static Random random = new Random();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        initializeBoard();
        displayBoard();

        // Choose game mode
        System.out.println("Choose game mode:");
        System.out.println("1. Human vs. Human");
        System.out.println("2. Human vs. Computer");
        System.out.println("select 1 or 2 : ");
        int gameMode = scanner.nextInt();

        if (gameMode == 1) {
            currentPlayer = X_MARK;
            playHumanVsHuman();
        } else if (gameMode == 2) {
            System.out.println("You are playing against the computer.");
            System.out.println("You are X, and the computer is O.");
            currentPlayer = O_MARK; // Corrected initialization for computer's turn
            playHumanVsComputer();
        } else {
            System.out.println("Invalid game mode choice. Exiting...");
        }

        scanner.close();
    }

    private static void initializeBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = EMPTY;
            }
        }
    }

    private static void displayBoard() {
        System.out.println("  0 1 2");
        for (int i = 0; i < 3; i++) {
            System.out.print(i + " ");
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static void playHumanVsHuman() {
        while (true) {
            int[] move = getPlayerMove();
            int row = move[0];
            int col = move[1];

            if (isValidMove(row, col)) {
                board[row][col] = currentPlayer;
                displayBoard();

                if (checkForWin(row, col)) {
                    System.out.println("Player " + currentPlayer + " wins!");
                    break;
                } else if (checkForDraw()) {
                    System.out.println("It's a draw!");
                    break;
                }

                currentPlayer = (currentPlayer == X_MARK) ? O_MARK : X_MARK;
            } else {
                System.out.println("Invalid move! Please try again.");
            }
        }
    }

    private static void playHumanVsComputer() {
        while (true) {
            if (currentPlayer == X_MARK) {
                int[] move = getPlayerMove();
                int row = move[0];
                int col = move[1];

                if (isValidMove(row, col)) {
                    board[row][col] = currentPlayer;
                    displayBoard();

                    if (checkForWin(row, col)) {
                        System.out.println("Player " + currentPlayer + " wins!");
                        break;
                    } else if (checkForDraw()) {
                        System.out.println("It's a draw!");
                        break;
                    }

                    currentPlayer = O_MARK;
                } else {
                    System.out.println("Invalid move! Please try again.");
                }
            } else {
                int row = random.nextInt(3);
                int col = random.nextInt(3);

                while (!isValidMove(row, col)) {
                    row = random.nextInt(3);
                    col = random.nextInt(3);
                }

                board[row][col] = currentPlayer;
                displayBoard();

                if (checkForWin(row, col)) {
                    System.out.println("Computer wins!");
                    break;
                } else if (checkForDraw()) {
                    System.out.println("It's a draw!");
                    break;
                }

                currentPlayer = X_MARK;
            }
        }
    }

    private static int[] getPlayerMove() {
        System.out.print("Player " + currentPlayer + ", enter your move (row column): ");
        int row = scanner.nextInt();
        int col = scanner.nextInt();
        return new int[]{row, col};
    }

    private static boolean isValidMove(int row, int col) {
        return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == EMPTY;
    }

    private static boolean checkForWin(int row, int col) {
        return checkRow(row) || checkColumn(col) || checkDiagonals(row, col);
    }

    private static boolean checkRow(int row) {
        return board[row][0] == board[row][1] && board[row][1] == board[row][2] && board[row][0] != EMPTY;
    }

    private static boolean checkColumn(int col) {
        return board[0][col] == board[1][col] && board[1][col] == board[2][col] && board[0][col] != EMPTY;
    }

    private static boolean checkDiagonals(int row, int col) {
        return (row == col || row + col == 2) && (checkMainDiagonal() || checkAntiDiagonal());
    }

    private static boolean checkMainDiagonal() {
        return board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != EMPTY;
    }

    private static boolean checkAntiDiagonal() {
        return board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != EMPTY;
    }

    private static boolean checkForDraw() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }
}
